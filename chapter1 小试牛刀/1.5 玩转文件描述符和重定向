    文件描述符是与文件输入、输出相关联的整数。它们用来跟踪已打开的文件。最常见的文件描述符是stdin、stdout和stderr。我们可以将某个文件描述符
的内容重定向到另一个文件描述符中。下面给出一些对文件描述符进行操作和重定向的例子。
1.预备知识
  我们在编写脚本的时候会频繁使用标准输入(stdin)、标准输出(stdout)和标准错误(stderr)。通过内容过滤将输出重定向到文件是我们从事的基本任务之一
当命令输出文本的时候，这些输出文本有可能是错误信息，也可能是正常的(非错误的)输出信息。单靠查看输出的文本本身，我们没法区分哪些是正常的输出
文本，哪些是错误文本。不过，我们可以通过文件描述符来解决这个问题，将那些与特定描述符关联的文本提取出来。
  文件描述符是与一个打开的文件或数据流相关联的整数。文件描述符0、1以及2是系统预留的。
  0  ---- stdin  (标准输入)
  1  ---- stdout (标准输出)
  2  ---- stderr (标准错误)
2.实战演练
  用下面的方法可以将输出文本重定向或保存到一个文件中:
  $ echo "This is sample text 1" > temp.txt
  这种方法通过截取文件的方式，将输出文本存储到文件temp.txt中，也就是说在把echo命令的输出写入文件之前，temp.txt中的内容首先会被清空。
  接下来，再看另一个例子:
  $ echo "This is sample text 2" >> temp.txt
  这种方法会将文本追加到目标文件中。
  >和>>并不相同。尽管这两个操作符都可以将文本重定向到文件，但是前者会先清空文件，再写入内容；而后者会将内容追加到现有文件的尾部。
  可以用下面的方法查看文件内容:
  $ cat temp.txt
  This is sample text 1
  This is sample text 2
  当使用重定向操作符时，重定向的内容不会出现在终端，而是直接被导入文件。重定向操作符默认使用标准输出。如果想使用特定的文件描述符，你必须
  将描述符置于操作符之前。
  >等同于1>;对于>>来说，情况也类似(即>>等同于1>>)。
  来看看什么是标准错误以及如何对它重定向。当命令输出错误信息时，stderr信息就会被打印出来。考虑下面的例子:
  $ ls +
  ls:cannot access +:No such file or directory
  这里，+是一个非法参数，因此将返回错误信息。
  注：成功和不成功的命令
    当一个命令发生错误并退回时，它会返回一个非0的退出状态；而当命令成功完成后，它会返回数字0,退出状态可以冲特殊变量$?中获得(在命令执行
  语句之后立刻运行echo $?,就可以打印出退出状态)。
  下面的命令会将stderr文本打印到屏幕上，而不是文件中。
  $ ls + > out.txt
  ls:cannot access +:No such file or directory
  然而在下面的命令中，stdout没有任何输出，因此会生出空文件out.txt。
  $ ls + 2 > out.txt   #正常运行
  
  
