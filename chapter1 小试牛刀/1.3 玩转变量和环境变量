1.预备知识
  变量采用常见的命名方式进行命名。当一个应用程序执行的时候，它接收一组环境变量。可以使用env命令在终端中查看所有与此终端进程相关的环境变量。
  对于每个进程，在其运行时的环境变量可以使用下面的命令来查看:
  cat /proc/$PID/environ
  其中，将PID设置成相关进程的进程ID(PID总是一个整数)。
  假设有一个叫做crond的应用程序正在运行。我们可以使用pgrep命令获得crond的进程ID:
  $ pgrep crond
  2013
  那么，你就可以通过以下命令获得与该进程相关的环境变量:
  $ cat /proc/2013/environ
  上面介绍的命令返回一个包含环境变量以及对应变量值的列表。每一个变量以name=value的形式来描述，彼此之间由null字符(\0)分隔。如果你将\0替换成
  \n，那么就可以将输出重新格式化，使得每一行显示一对variable=value。替换可以使用tr命令来实现:
  $ cat /proc/2013/environ | tr '\0' '\n'
2.实战演练
  一个变量可以通过以下方式进行赋值:
  var=value
  var是变量名，value是赋给变量的值。如果value不包含任何空白字符(例如空格),那么它不需要使用引号进行引用，反之，则必须使用单引号或双引号。
  注意，var = value不同于var=value。把var=value写成var = value是一个常见的错误，因为前者是赋值操作，后者则是相等操作。
  在变量名之前加上$前缀就可以打印出变量的内容:
  var="value"   #给变量var赋值
  echo $var
  或者
  echo ${var}
  输出如下:
  value
  我们可以在printf或echo命令的双引号中引用变量值。
  #!/bin/bash
  #Filename:variables.sh
  fruit=apple
  count=5
  echo "We have $count ${fruit}(s)"
  输出如下:
  We have 5 apple(s)
  环境变量是未在当前进程中定义，而从父进程中继承而来的变量。例如环境变量PATH
